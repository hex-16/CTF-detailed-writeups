from gmpy2 import *
import itertools

p, q, dmp, dmq, c1, c2, c3, c4 = 12088887485280517146272351590086025512894829636183954778563449580550231370376017554816220328955961172075206459267753929996237621298555579019727394465674063L, 11344223853740693557654410531952195662821090736896673801003676892459775449192551267317101594215180569551903151725246207006028341210716508671503703010092427L, mpz(10032761362528417809390786686983630749882852861617512113543758973557077707894035928506123156110127559375548294496563592927368299484757626525952458340568503L), mpz(4868092267168885038974809401311095920573250902516232858368050006494301884831642892750785770087167286801734022695787726561945151455977178294054408017682577L), 30875403489876653885912547279018806549030905480248397936846247378245217866257457222440730253201998862445121908304324870229231062775227856785108589489716468723769279647110987048414321923856621576438500825110176611429118306067270762875938728994680679031824430158750808640691062408446878763972845493756699928493L, 1042892267355594297120540442368551754479736519333196669066168173894861527888583645029915429895390975939643541002325080677596334842933885095969973479367082602176378286808385571707413736310408401831698246429745043504546544024553352281916164014254561193273162048745382153304092774308783733558427045943861420522L, 13305663883272784424661605146290094046943709696152618284699103777893195792759238135155097653440248019202785016453036037532528697388406129510827220150275169896654638862661849022432212729359296475510022362947180755107281832415074206443768060780664134664521192493999750714278456406689911778065742015535523678936L, 8977734959582960872873572465034715330131594232013324014791049087451625600242275891657172846905069987995860238290582324481257433082768040460319871422977899145905016726462924892566788730774383043248892562204164976344393965963075787162813999301162634347441757624654276169168018637973453997305233254555929739040L

n = p * q
phi_n = (p - 1) * (q - 1)

# recover c
c = pow(c4, invert(0x10001, phi_n), n)

# recover b
g = gcd(p - 1, q - 1)
pp, qq = (p - 1) / g, (q - 1) / g
dp, dq = dmp % pp, dmq % qq
dpq = (dmq - dmp) / g
X = dpq * invert(pp, qq)
d = ((p - 1) * X + dmp) % (pp * qq * g)
b = pow(c1, d, n)

print 'b: ', b
print 'c: ', c

# recover a
m1, m2 = b >> 256, b & 2 ** 256 - 1
alphebet = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102]
LIST = {}
for i, j, k, l in itertools.product(alphebet, repeat=4):
    e1 = (i << 24) + (j << 16) + (k << 8) + l
    LIST[c2 * invert(pow(m1 + m2, e1, n), n) % n] = e1

aa = -1
for i, j, k, l in itertools.product(alphebet, repeat=4):
    e2 = (i << 24) + (j << 16) + (k << 8) + l
    tmp = pow(m1 + m2, e2, n)
    if tmp in LIST:
        e1 = LIST[tmp]
        aa = (e1 << 32) + e2
        if c3 == pow(aa, aa, n):
            a = aa
            break
print 'a: ', aa

